#!/usr/bin/env ruby

require 'csv'
require 'thor'
require_relative './../lib/group_mixer'

class GroupMixer::Command < Thor
  default_command :execute

  desc '--group_size=GROUP_SIZE --people=FILE_PATH --past_set=CSV_PATH', 'execute command'
  method_option :people, type: :string, require: true
  method_option :past_set, type: :string
  method_option :group_size, type: :numeric, require: true
  method_option :member_size, type: :numeric, require: true
  method_option :reminders, type: :boolean
  def execute
    people = people_from_file(options[:people])
    past_set = past_set_from_file(options[:past_set])
    group_size = options[:group_size]
    member_size = options[:member_size]
    is_separate = options[:reminders]

    if !!(group_size) ^ !!(member_size)
      groups = group_size ? GroupMixer.by_group_size(people, past_set, group_size, is_separate)
                          : GroupMixer.by_member_size(people, past_set, member_size, is_separate)
      groups.each do |group|
        puts group.to_a.join(',')
      end
    end
  end

  private

  def people_from_file(filepath)
    people = []
    File.open(filepath) do |f|
      f.each_line do |line|
        people << line.strip
      end
    end
    people
  end

  def past_set_from_file(filepath)
    return [[]] if filepath.nil?

    past_sets = []
    CSV.foreach(filepath) do |row|
      past_sets << row
    end
    past_sets
  end
end

GroupMixer::Command.start(ARGV)
